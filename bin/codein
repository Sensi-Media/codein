#!/usr/bin/php
<?php

namespace Sensi\Codein;

$dir = $argv[1];
$dir = realpath($dir);

function walk($dir)
{
    $d = dir($dir);
    while (false !== ($entry = $d->read())) {
        if ($entry{0} == '.') {
            continue;
        }
        if (is_dir("$dir/$entry")) {
            walk("$dir/$entry");
            continue;
        }
        if (!preg_match("@\.php$@", $entry)) {
            continue;
        }
        $code = file_get_contents(preg_replace("@/\*(.*?)\*/@ms", '', "$dir/$entry"));
        if (!preg_match_all("@^use (.*?);$@ms", $code, $matches)) {
            continue;
        }
        $namespaces = [];
        $nss = [];
        foreach ($matches[1] as $i => $match) {
            if (strpos($match, '{')) {
                $match = substr($match, strpos($match, '{') + 1);
                $nss = array_merge($nss, preg_split("@,\s*@", preg_replace("@^\s*(.*?)\s*}$@ms", '\\1', $match)));
            } else {
                $parts = explode("\\", $match);
                $nss[] = $match;
                if (count($parts) > 1) {
                    if (!isset($namespaces["{$parts[0]}\\{$parts[1]}"])) {
                        $namespaces["{$parts[0]}\\{$parts[1]}"] = 0;
                    }
                    $namespaces["{$parts[0]}\\{$parts[1]}"]++;
                }
            }
            $code = str_replace($matches[0][$i], '', $code);
        }
        foreach ($namespaces as $name => $count) {
            if ($count > 1) {
                echo "$dir/$entry\n";
        //        break;
            }
        }
        foreach ($nss as $i => $namespace) {
            if (strpos($namespace, ' as ')) {
                $parts = explode(' as ', $namespace);
                $namespace = end($parts);
            }
            if (strpos($namespace, '\\')) {
               $namespace = substr($namespace, strrpos($namespace, '\\') + 1);
            }
            $namespace = preg_replace("@\s*}@ms", '', trim($namespace));
            $nss[$i] = $namespace;
        }
        $nss = array_unique($nss);
        foreach ($nss as $namespace) {
            // Instantiation:
            if (preg_match("@new $namespace@", $code, $matches)) {
                continue;
            }
            // As argument type hint:
            if (preg_match_all('@function \w+\((.*?)\)@ms', $code, $matches)) {
                foreach ($matches[1] as $args) {
                    $ns = preg_split('@,\s*@', $args);
                    foreach ($ns as $one) {
                        if (preg_match("@^$namespace@", $one)) {
                            continue 3;
                        }
                    }
                }
            }                    
            if (preg_match_all('@function \((.*?)\)@ms', $code, $matches)) {
                foreach ($matches[1] as $args) {
                    $ns = preg_split('@,\s*@', $args);
                    foreach ($ns as $one) {
                        if (preg_match("@^$namespace@", $one)) {
                            continue 3;
                        }
                    }
                }
            }                    
            // As trait use:
            if (preg_match("@use $namespace@", $code)) {
                continue;
            }
            // As return type hint:
            if (preg_match("@:\?? $namespace@", $code, $matches)) {
                continue;
            }
            // As classname, static method or constant:
            if (preg_match("@$namespace(\\\\(\w|\\\\)+)?::@m", $code, $matches)) {
                continue;
            }
            // In instanceof check:
            if (preg_match("@instanceof $namespace@", $code, $matches)) {
                continue;
            }
            // In class definition:
            if (preg_match("@extends $namespace@", $code, $matches)) {
                continue;
            }
            // Implementing an interface:
            if (preg_match("@implements (.*?)$@m", $code, $match)) {
                $ns = preg_split('@,\s*@', $match[1]);
                foreach ($ns as $one) {
                    if (preg_match("@^$namespace@", $one)) {
                        continue 2;
                    }
                }
            }                    
            // In try/catch:
            if (preg_match("@} catch \($namespace @", $code, $matches)) {
                continue;
            }
            echo "Unused: $namespace in $dir/$entry\n";
        }
    }
}

walk($dir);
die();

